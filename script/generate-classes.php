<?php
// FILEPATH: /home/taorepoara/lenra/libs/app-lib-php/script/generate-classes.php

$genDir = realpath(__DIR__ . '/../generated');
$modelNamespace = "Lenra\\App\\Response\\View\\Model";
$baseComponentsDir = realpath($genDir . "/components/base");
$componentsImplDir = realpath(__DIR__ . '/../src/components');

generateClasses();

function generateClasses() {
  global $baseComponentsDir, $componentsImplDir;

  $schemaPath = realpath(__DIR__ . '/../api/responses/view.schema.json');
  $mainSchema = json_decode(file_get_contents($schemaPath), true);
  $componentList = array_merge(
    $mainSchema["definitions"]["components.lenra"]["oneOf"],
    $mainSchema["definitions"]["components.json"]["oneOf"]
  );

  // Generate not existing classes
  // $componentsExports = file_exists($componentsFile) ? array_filter(
  //   explode("\n", file_get_contents($componentsFile)),
  //   function ($line) {
  //     return !startsWith($line, "//");
  //   }
  // ) : ["export * from './component.php';"];
  // $componentsFileChanged = false;

  foreach ($componentList as $component) {
    $ref = $component['$ref'];

    // Check if the class exists
    $schema = array_reduce(explode("/", trim($ref, "/")), function ($o, $part) {
      return $o[$part];
    }, $mainSchema);
    $comp = $schema["title"];
    $baseClassPath = $baseComponentsDir . "/" . $comp . "Base.php";
    echo "Generating " . $baseClassPath . " file for " . $comp . "\n";
    file_put_contents($baseClassPath, generateBaseClass($schema));

    // Check if the file corresponding to the schema exists
    $classPath = $componentsImplDir . "/" . $comp . ".php";

    if (!file_exists($classPath)) {
      // Creates the file
      echo "Generating " . $classPath . " file for " . $comp . "\n";
      file_put_contents($classPath, generateImplClass($schema, $comp));
    }

    // // Check if the file is imported in the main components file
    // $importComponent = "export * from './" . $comp . ".php';";
    // if (!in_array($importComponent, $componentsExports)) {
    //   echo "Adding import for " . $classPath . "\n";
    //   $componentsExports[] = $importComponent;
    //   $componentsFileChanged = true;
    // }
  }

  // if ($componentsFileChanged) {
  //   echo "Updating " . $componentsFile . "\n";
  //   sort($componentsExports);
  //   array_unshift($componentsExports, "// This file is auto-generated by generate-classes.php. Do not edit it.");
  //   file_put_contents($componentsFile, implode("\n", $componentsExports));
  // }
}

function generateBaseClass($schema) {
  global $modelNamespace;
  
  $title = $schema["title"];
  $properties = $schema["properties"];
  $required = $schema["required"];
  $propertiesNotRequired = array_filter(array_keys($properties), function ($key) use ($required) {
    return !in_array($key, $required);
  });

  $code = "// This file is auto-generated by generate-classes.php. Do not edit it.\n\n";
  $code .= "use Lenra\App\Components\Base\Builder;\n\n";
  $code .= "class " . $title . "Impl extends Builder {\n";
  $code .= "class " . $title . "BaseImpl extends Component implements I" . $title . " {\n";
  foreach ($propertiesNotRequired as $key) {
    $property = $properties[$key];
    $jsdocLines = [];
    $jsdoc = '';

    if (isset($property["description"])) {
      $jsdocLines[] = $property["description"];
    }
    if (isset($property["deprecated"])) {
      $jsdocLines[] = "@deprecated " . ($property["deprecatedComment"] ?? "");
    }
    if (count($jsdocLines) > 0) {
      $jsdoc = "/**\n";
      foreach ($jsdocLines as $line) {
        $jsdoc .= " * " . $line . "\n";
      }
      $jsdoc .= " */\n";
    }
    if (preg_match("/^on[A-Z]/", $key)) {
      $code .= $jsdoc . "  public function " . $key . "(\$listener, \$props = []) {\n";
      $code .= "    return \$this->setListener('" . $key . "', \$listener, \$props);\n";
      $code .= "  }\n";
    } else {
      $code .= $jsdoc . "  public function " . $key . "(\$value) {\n";
      $code .= "    \$this->model['" . $key . "'] = \$value;\n";
      $code .= "    return \$this;\n";
      $code .= "  }\n";
    }
  }
  $code .= "}\n\n";
  $code .= "export { I" . $title . " };\n";

  return $code;
}

function generateImplClass($schema) {

  $title = $schema["title"];
  $properties = $schema["properties"];
  $required = $schema["required"];
  $requiredNoType = array_filter($required, function ($key) {
    return $key != "_type";
  });

  $code = "// This file is auto-generated by generate-classes.php but it can be edited\n\n";
  $code .= "use Lenra\App\Components\Base\Builder;\n\n";
  $code .= "class " . $title . "Impl extends Builder {\n";
  $code .= "  // Add here custom implementations\n";
  $code .= "}\n\n";
  $code .= "function " . $title . "(" . implode(", ", array_map(function ($key) use ($title) {
    return "$" . $key;
  }, $requiredNoType)) . ") {\n";
  $code .= "  return new " . $title . "Impl([\n";
  $code .= "    '_type' => '" . $properties["_type"]["const"] . "',\n";
  foreach ($requiredNoType as $key) {
    $code .= "    '" . $key . "' => $" . $key . ",\n";
  }
  $code .= "  ]);\n";
  $code .= "}\n\n";
  $code .= "interface I" . $title . " {}\n\n";
  $code .= "export { I" . $title . " };\n";

  return $code;
}

// function startsWith($haystack, $needle) {
//   return substr($haystack, 0, strlen($needle)) === $needle;
// }
