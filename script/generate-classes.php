<?php
// FILEPATH: /home/taorepoara/lenra/libs/app-lib-php/script/generate-classes.php

require_once __DIR__ . '/../vendor/autoload.php';


$genDir = __DIR__ . '/../generated';
$baseClassesDir = $genDir . "/Base";
$implClassesDir = __DIR__ . '/../src';
$typeMapping = new ArrayObject();
$types = [];

$schemaPath = realpath(__DIR__ . '/../api/responses/view.schema.json');
$mainSchema = json_decode(file_get_contents($schemaPath), true);

foreach ($mainSchema["definitions"] as $defPath => $schema) {
  if (isset($schema["oneOf"]) || isset($schema['$ref']) || isset($schema["patternProperties"])) continue;
  if (!(isset($schema["type"]) && $schema["type"] == "object" && isset($schema["properties"]))) continue;

  echo "Mapping $defPath\n";

  $typeParser = new TypeParser($defPath, $schema);
  $typeMapping[$typeParser->model()] = "\\" . $typeParser->class();
  array_push($types, $typeParser);
}

var_dump($typeMapping);


foreach ($types as &$typeParser) {
  $typeParser->generateBaseClass();
  $typeParser->generateImplClass();
}

class TypeParser
{
  private string $model;
  private string $normalizer;
  private string $className;
  private string|Null $type;

  private string $baseClassNameSpace;
  private string $baseClassPath;
  private string $baseClassFileDir;
  private string $baseClassFile;

  private string $implClassNameSpace;
  private string $implClassPath;
  private string $implClassFileDir;
  private string $implClassFile;

  /** 
   * @var Property[] 
   */
  private array $constructArgs;
  /** 
   * @var Property[] 
   */
  private array $properties;

  public function __construct($defPath, $schema)
  {
    global $baseClassesDir, $implClassesDir;
    $defPathParts = explode(".", $defPath);
    foreach ($defPathParts as &$part) {
      $part = ucfirst($part);
    }

    $genClassName = join("", $defPathParts);
    $this->model = "Lenra\\App\\Response\\View\\Model\\" . $genClassName;
    $this->normalizer = "Lenra\\App\\Response\\View\\Normalizer\\" . $genClassName . "Normalizer";
    $lastPart = array_pop($defPathParts);
    $this->className = $schema["title"] ?? $lastPart;
    $this->type = array_reduce(["properties", "_type", "const"], function ($o, $key) {
      if (isset($o) && isset($o[$key])) return $o[$key];
      return Null;
    }, $schema);

    $this->baseClassNameSpace = "Lenra\\App\\Base\\" . join("\\", $defPathParts);
    $this->baseClassPath = $this->baseClassNameSpace . "\\" . $this->className . "Base";
    $this->baseClassFileDir = $baseClassesDir . "/" . join("/", $defPathParts);
    $this->baseClassFile =  $this->baseClassFileDir . "/" . $this->className . "Base.php";

    $this->implClassNameSpace = "Lenra\\App\\" . join("\\", $defPathParts);
    $this->implClassPath = $this->implClassNameSpace . "\\" . $this->className;
    $this->implClassFileDir = $implClassesDir . "/" . join("/", $defPathParts);
    $this->implClassFile = $this->implClassFileDir . "/" . $this->className . ".php";

    $propertiesNames = array_keys($schema["properties"]);
    $required = $schema["required"] ?? [];

    $classReflection = new ReflectionClass($this->model);

    $this->constructArgs = [];
    $this->properties = [];

    foreach ($propertiesNames as $key) {
      if ($key == "_type") continue;
      $name = $key;
      if (substr($name, 0, 1) == "_") $name = substr($name, 1);
      $setter = "set" . ucfirst($name);
      echo "Create setter $setter for $key\n";
      // get the type define by the setter
      $type = $classReflection->getMethod($setter)->getParameters()[0]->getType();
      $property = new Property($key, $name, '$' . $name, $type, $setter);
      if (in_array($key, $required)) {
        array_push($this->constructArgs, $property);
      }
      array_push($this->properties, $property);
    }
  }

  function model(): string
  {
    return $this->model;
  }

  function class(): string
  {
    return $this->implClassPath;
  }

  function generateBaseClass()
  {
    echo "Generating " . $this->baseClassFile . " file for " . $this->className . " for building " . $this->model . "\n";
    $code = "<?php\n// This file is auto-generated by generate-classes.php. Do not edit it.\n\n";
    $code .= "namespace " . $this->baseClassNameSpace . ";\n\n";
    $code .= "use Lenra\App\Components\Base\Builder;\n\n";
    $code .= "/**\n* @template-extends Builder<\\" . $this->model .  ">\n*/\n";
    $code .= "abstract class " . $this->className . "Base extends Builder {\n";

    $componentType = isset($this->type) ? "'" . $this->type . "'" : 'Null';
    $code .= "  public function __construct(" . join(" ,", array_map(function ($arg) {
      return $arg->arg();
    }, $this->constructArgs)) . ")\n  {\n";
    $code .= "    parent::__construct(" . $componentType . ", \\" . $this->model . "::class);\n";
    $code .= join("", array_map(function ($arg) {
      return '    $this->' . $arg->name . "(" . $arg->var . ");\n";
    }, $this->constructArgs));
    $code .= "  }\n\n";

    foreach ($this->properties as $prop) {
      $code .= "  public function " . $prop->name . "(" . $prop->arg() . "): self {\n";
      $code .= "    \$this->data->" . $prop->setter . "(Builder::convert(" . $prop->var . "));\n";
      $code .= "    return \$this;\n";
      $code .= "  }\n\n";
    }

    $code .= "}\n";

    if (!file_exists($this->baseClassFileDir)) {
      mkdir($this->baseClassFileDir, 0777, true);
    }
    file_put_contents($this->baseClassFile, $code);
  }

  function generateImplClass()
  {
    if (file_exists($this->implClassFile)) return;
    echo "Generating " . $this->implClassFile . " file for " . $this->className . "\n";
    $code = "<?php\n// This file is auto-generated by generate-classes.php but it can be edited\n\n";
    $code .= "namespace " . $this->implClassNameSpace . ";\n\n";
    $code .= "class " . $this->className . " extends \\" . $this->baseClassPath . " {\n";
    $code .= "  // Add here custom implementations\n\n";

    $code .= "  public static function builder(" . join(" ,", array_map(function ($arg) {
      return $arg->arg();
    }, $this->constructArgs)) . "): " . $this->className . " {\n";

    $code .= "    return new " . $this->className . "(" . join(" ,", array_map(function ($arg) {
      return $arg->var;
    }, $this->constructArgs)) . ");\n";

    $code .= "  }\n";
    $code .= "}\n";


    if (!file_exists($this->implClassFileDir)) {
      mkdir($this->implClassFileDir, 0777, true);
    }
    file_put_contents($this->implClassFile, $code);
  }
}

class Property
{
  readonly string $key;
  readonly string $name;
  readonly string $var;
  readonly string|Null $type;
  readonly string $setter;

  public function __construct($key, $name, $var, $type, $setter)
  {
    $this->key = $key;
    $this->name = $name;
    $this->var = $var;
    $this->type = $type;
    $this->setter = $setter;
  }

  function arg(): string
  {
    global $typeMapping;
    if (isset($this->type)) {
      $type = $this->type;
      if (isset($typeMapping[$type])) {
        $type = $typeMapping[$type];
      }
      return $type . " " . $this->var;
    }
    return $this->var;
  }
}
