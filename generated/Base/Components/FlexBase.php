<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsFlex>
*/
abstract class FlexBase extends Builder {
  public function __construct(array $children)
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsFlex::class, Lenra\App\Response\View\Normalizer\ComponentsFlexNormalizer::class);
    $this->data->setChildren($children);
  }

  public function direction(string $direction): FlexBase {
    if ($direction instanceof Builder) $direction = $direction->data;
    $this->data->setDirection($direction);
    return $this;
  }

  public function mainAxisAlignment(string $mainAxisAlignment): FlexBase {
    if ($mainAxisAlignment instanceof Builder) $mainAxisAlignment = $mainAxisAlignment->data;
    $this->data->setMainAxisAlignment($mainAxisAlignment);
    return $this;
  }

  public function crossAxisAlignment(string $crossAxisAlignment): FlexBase {
    if ($crossAxisAlignment instanceof Builder) $crossAxisAlignment = $crossAxisAlignment->data;
    $this->data->setCrossAxisAlignment($crossAxisAlignment);
    return $this;
  }

  public function spacing(float $spacing): FlexBase {
    if ($spacing instanceof Builder) $spacing = $spacing->data;
    $this->data->setSpacing($spacing);
    return $this;
  }

  public function fillParent(bool $fillParent): FlexBase {
    if ($fillParent instanceof Builder) $fillParent = $fillParent->data;
    $this->data->setFillParent($fillParent);
    return $this;
  }

  public function scroll(bool $scroll): FlexBase {
    if ($scroll instanceof Builder) $scroll = $scroll->data;
    $this->data->setScroll($scroll);
    return $this;
  }

  public function padding(\Lenra\App\Components\Styles\Padding $padding): FlexBase {
    if ($padding instanceof Builder) $padding = $padding->data;
    $this->data->setPadding($padding);
    return $this;
  }

  public function horizontalDirection(string $horizontalDirection): FlexBase {
    if ($horizontalDirection instanceof Builder) $horizontalDirection = $horizontalDirection->data;
    $this->data->setHorizontalDirection($horizontalDirection);
    return $this;
  }

  public function verticalDirection(string $verticalDirection): FlexBase {
    if ($verticalDirection instanceof Builder) $verticalDirection = $verticalDirection->data;
    $this->data->setVerticalDirection($verticalDirection);
    return $this;
  }

  public function textBaseline(string $textBaseline): FlexBase {
    if ($textBaseline instanceof Builder) $textBaseline = $textBaseline->data;
    $this->data->setTextBaseline($textBaseline);
    return $this;
  }

}
