<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsFlex>
*/
abstract class FlexBase extends Builder {
  public function __construct(array $children)
  {
    parent::__construct('flex', \Lenra\App\Response\View\Model\ComponentsFlex::class, \Lenra\App\Response\View\Normalizer\ComponentsFlexNormalizer::class);
    $this->children($children);
  }

  public function children(array $children): FlexBase {
    $this->data->setChildren(Builder::convert($children));
    return $this;
  }

  public function direction(string $direction): FlexBase {
    $this->data->setDirection(Builder::convert($direction));
    return $this;
  }

  public function mainAxisAlignment(string $mainAxisAlignment): FlexBase {
    $this->data->setMainAxisAlignment(Builder::convert($mainAxisAlignment));
    return $this;
  }

  public function crossAxisAlignment(string $crossAxisAlignment): FlexBase {
    $this->data->setCrossAxisAlignment(Builder::convert($crossAxisAlignment));
    return $this;
  }

  public function spacing(float $spacing): FlexBase {
    $this->data->setSpacing(Builder::convert($spacing));
    return $this;
  }

  public function fillParent(bool $fillParent): FlexBase {
    $this->data->setFillParent(Builder::convert($fillParent));
    return $this;
  }

  public function scroll(bool $scroll): FlexBase {
    $this->data->setScroll(Builder::convert($scroll));
    return $this;
  }

  public function padding(\Lenra\App\Components\Styles\Padding $padding): FlexBase {
    $this->data->setPadding(Builder::convert($padding));
    return $this;
  }

  public function horizontalDirection(string $horizontalDirection): FlexBase {
    $this->data->setHorizontalDirection(Builder::convert($horizontalDirection));
    return $this;
  }

  public function verticalDirection(string $verticalDirection): FlexBase {
    $this->data->setVerticalDirection(Builder::convert($verticalDirection));
    return $this;
  }

  public function textBaseline(string $textBaseline): FlexBase {
    $this->data->setTextBaseline(Builder::convert($textBaseline));
    return $this;
  }

}
