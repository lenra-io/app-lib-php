<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components;

use Lenra\App\Components\Base\Builder;

abstract class ImageBase extends Builder {
  public function __construct(string $src)
  {
    parent::__construct('image');
    $this->src($src);
  }

  public function src(string $src): self {
    $this->data['src'] = $src;
    return $this;
  }

  public function width(float $width): self {
    $this->data['width'] = $width;
    return $this;
  }

  public function height(float $height): self {
    $this->data['height'] = $height;
    return $this;
  }

  public function alignment(string $alignment): self {
    $this->data['alignment'] = $alignment;
    return $this;
  }

  public function centerSlice(\Lenra\App\Components\Styles\Rect $centerSlice): self {
    $this->data['centerSlice'] = $centerSlice;
    return $this;
  }

  public function errorPlaceholder($errorPlaceholder): self {
    $this->data['errorPlaceholder'] = $errorPlaceholder;
    return $this;
  }

  public function excludeFromSemantics(bool $excludeFromSemantics): self {
    $this->data['excludeFromSemantics'] = $excludeFromSemantics;
    return $this;
  }

  public function filterQuality(string $filterQuality): self {
    $this->data['filterQuality'] = $filterQuality;
    return $this;
  }

  public function fit(string $fit): self {
    $this->data['fit'] = $fit;
    return $this;
  }

  public function framePlaceholder($framePlaceholder): self {
    $this->data['framePlaceholder'] = $framePlaceholder;
    return $this;
  }

  public function gaplessPlayback(bool $gaplessPlayback): self {
    $this->data['gaplessPlayback'] = $gaplessPlayback;
    return $this;
  }

  public function isAntiAlias(bool $isAntiAlias): self {
    $this->data['isAntiAlias'] = $isAntiAlias;
    return $this;
  }

  public function loadingPlaceholder($loadingPlaceholder): self {
    $this->data['loadingPlaceholder'] = $loadingPlaceholder;
    return $this;
  }

  public function repeat(string $repeat): self {
    $this->data['repeat'] = $repeat;
    return $this;
  }

  public function semanticLabel(string $semanticLabel): self {
    $this->data['semanticLabel'] = $semanticLabel;
    return $this;
  }

}
