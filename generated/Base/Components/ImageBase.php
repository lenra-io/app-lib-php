<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsImage>
*/
abstract class ImageBase extends Builder {
  public function __construct(string $src)
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsImage::class, Lenra\App\Response\View\Normalizer\ComponentsImageNormalizer::class);
    $this->data->setSrc($src);
  }

  public function width(float $width): ImageBase {
    if ($width instanceof Builder) $width = $width->data;
    $this->data->setWidth($width);
    return $this;
  }

  public function height(float $height): ImageBase {
    if ($height instanceof Builder) $height = $height->data;
    $this->data->setHeight($height);
    return $this;
  }

  public function alignment(string $alignment): ImageBase {
    if ($alignment instanceof Builder) $alignment = $alignment->data;
    $this->data->setAlignment($alignment);
    return $this;
  }

  public function centerSlice(\Lenra\App\Components\Styles\Rect $centerSlice): ImageBase {
    if ($centerSlice instanceof Builder) $centerSlice = $centerSlice->data;
    $this->data->setCenterSlice($centerSlice);
    return $this;
  }

  public function errorPlaceholder($errorPlaceholder): ImageBase {
    if ($errorPlaceholder instanceof Builder) $errorPlaceholder = $errorPlaceholder->data;
    $this->data->setErrorPlaceholder($errorPlaceholder);
    return $this;
  }

  public function excludeFromSemantics(bool $excludeFromSemantics): ImageBase {
    if ($excludeFromSemantics instanceof Builder) $excludeFromSemantics = $excludeFromSemantics->data;
    $this->data->setExcludeFromSemantics($excludeFromSemantics);
    return $this;
  }

  public function filterQuality(string $filterQuality): ImageBase {
    if ($filterQuality instanceof Builder) $filterQuality = $filterQuality->data;
    $this->data->setFilterQuality($filterQuality);
    return $this;
  }

  public function fit(string $fit): ImageBase {
    if ($fit instanceof Builder) $fit = $fit->data;
    $this->data->setFit($fit);
    return $this;
  }

  public function framePlaceholder($framePlaceholder): ImageBase {
    if ($framePlaceholder instanceof Builder) $framePlaceholder = $framePlaceholder->data;
    $this->data->setFramePlaceholder($framePlaceholder);
    return $this;
  }

  public function gaplessPlayback(bool $gaplessPlayback): ImageBase {
    if ($gaplessPlayback instanceof Builder) $gaplessPlayback = $gaplessPlayback->data;
    $this->data->setGaplessPlayback($gaplessPlayback);
    return $this;
  }

  public function isAntiAlias(bool $isAntiAlias): ImageBase {
    if ($isAntiAlias instanceof Builder) $isAntiAlias = $isAntiAlias->data;
    $this->data->setIsAntiAlias($isAntiAlias);
    return $this;
  }

  public function loadingPlaceholder($loadingPlaceholder): ImageBase {
    if ($loadingPlaceholder instanceof Builder) $loadingPlaceholder = $loadingPlaceholder->data;
    $this->data->setLoadingPlaceholder($loadingPlaceholder);
    return $this;
  }

  public function repeat(string $repeat): ImageBase {
    if ($repeat instanceof Builder) $repeat = $repeat->data;
    $this->data->setRepeat($repeat);
    return $this;
  }

  public function semanticLabel(string $semanticLabel): ImageBase {
    if ($semanticLabel instanceof Builder) $semanticLabel = $semanticLabel->data;
    $this->data->setSemanticLabel($semanticLabel);
    return $this;
  }

}
