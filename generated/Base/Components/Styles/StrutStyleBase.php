<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components\Styles;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsStylesStrutStyle>
*/
abstract class StrutStyleBase extends Builder {
  public function __construct()
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsStylesStrutStyle::class, Lenra\App\Response\View\Normalizer\ComponentsStylesStrutStyleNormalizer::class);
  }

  public function debugLabel(string $debugLabel): StrutStyleBase {
    if ($debugLabel instanceof Builder) $debugLabel = $debugLabel->data;
    $this->data->setDebugLabel($debugLabel);
    return $this;
  }

  public function fontFamily(string $fontFamily): StrutStyleBase {
    if ($fontFamily instanceof Builder) $fontFamily = $fontFamily->data;
    $this->data->setFontFamily($fontFamily);
    return $this;
  }

  public function fontFamilyFallback(array $fontFamilyFallback): StrutStyleBase {
    if ($fontFamilyFallback instanceof Builder) $fontFamilyFallback = $fontFamilyFallback->data;
    $this->data->setFontFamilyFallback($fontFamilyFallback);
    return $this;
  }

  public function fontSize(float $fontSize): StrutStyleBase {
    if ($fontSize instanceof Builder) $fontSize = $fontSize->data;
    $this->data->setFontSize($fontSize);
    return $this;
  }

  public function fontWeight(string $fontWeight): StrutStyleBase {
    if ($fontWeight instanceof Builder) $fontWeight = $fontWeight->data;
    $this->data->setFontWeight($fontWeight);
    return $this;
  }

  public function forceStrutHeight(bool $forceStrutHeight): StrutStyleBase {
    if ($forceStrutHeight instanceof Builder) $forceStrutHeight = $forceStrutHeight->data;
    $this->data->setForceStrutHeight($forceStrutHeight);
    return $this;
  }

  public function height(float $height): StrutStyleBase {
    if ($height instanceof Builder) $height = $height->data;
    $this->data->setHeight($height);
    return $this;
  }

  public function leading(float $leading): StrutStyleBase {
    if ($leading instanceof Builder) $leading = $leading->data;
    $this->data->setLeading($leading);
    return $this;
  }

  public function leadingDistribution(string $leadingDistribution): StrutStyleBase {
    if ($leadingDistribution instanceof Builder) $leadingDistribution = $leadingDistribution->data;
    $this->data->setLeadingDistribution($leadingDistribution);
    return $this;
  }

}
