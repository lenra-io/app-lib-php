<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components\Styles;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsStylesInputDecoration>
*/
abstract class InputDecorationBase extends Builder {
  public function __construct()
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsStylesInputDecoration::class);
  }

  public function alignLabelWithHint(bool $alignLabelWithHint): self {
    $this->data->setAlignLabelWithHint(Builder::convert($alignLabelWithHint));
    return $this;
  }

  public function border(\Lenra\App\Components\Styles\InputBorder $border): self {
    $this->data->setBorder(Builder::convert($border));
    return $this;
  }

  public function constraints(\Lenra\App\Components\Styles\BoxConstraints $constraints): self {
    $this->data->setConstraints(Builder::convert($constraints));
    return $this;
  }

  public function contentPadding(\Lenra\App\Components\Styles\Padding $contentPadding): self {
    $this->data->setContentPadding(Builder::convert($contentPadding));
    return $this;
  }

  public function counter($counter): self {
    $this->data->setCounter(Builder::convert($counter));
    return $this;
  }

  public function counterStyle(\Lenra\App\Components\Styles\TextStyle $counterStyle): self {
    $this->data->setCounterStyle(Builder::convert($counterStyle));
    return $this;
  }

  public function counterText(string $counterText): self {
    $this->data->setCounterText(Builder::convert($counterText));
    return $this;
  }

  public function disabledBorder(\Lenra\App\Components\Styles\InputBorder $disabledBorder): self {
    $this->data->setDisabledBorder(Builder::convert($disabledBorder));
    return $this;
  }

  public function enabled(bool $enabled): self {
    $this->data->setEnabled(Builder::convert($enabled));
    return $this;
  }

  public function enabledBorder(\Lenra\App\Components\Styles\InputBorder $enabledBorder): self {
    $this->data->setEnabledBorder(Builder::convert($enabledBorder));
    return $this;
  }

  public function errorBorder(\Lenra\App\Components\Styles\InputBorder $errorBorder): self {
    $this->data->setErrorBorder(Builder::convert($errorBorder));
    return $this;
  }

  public function errorMaxLines(int $errorMaxLines): self {
    $this->data->setErrorMaxLines(Builder::convert($errorMaxLines));
    return $this;
  }

  public function errorStyle(\Lenra\App\Components\Styles\TextStyle $errorStyle): self {
    $this->data->setErrorStyle(Builder::convert($errorStyle));
    return $this;
  }

  public function errorText(string $errorText): self {
    $this->data->setErrorText(Builder::convert($errorText));
    return $this;
  }

  public function fillColor(int $fillColor): self {
    $this->data->setFillColor(Builder::convert($fillColor));
    return $this;
  }

  public function filled(bool $filled): self {
    $this->data->setFilled(Builder::convert($filled));
    return $this;
  }

  public function floatingLabelBehavior(string $floatingLabelBehavior): self {
    $this->data->setFloatingLabelBehavior(Builder::convert($floatingLabelBehavior));
    return $this;
  }

  public function floatingLabelStyle(\Lenra\App\Components\Styles\TextStyle $floatingLabelStyle): self {
    $this->data->setFloatingLabelStyle(Builder::convert($floatingLabelStyle));
    return $this;
  }

  public function focusColor(int $focusColor): self {
    $this->data->setFocusColor(Builder::convert($focusColor));
    return $this;
  }

  public function focusedBorder(\Lenra\App\Components\Styles\InputBorder $focusedBorder): self {
    $this->data->setFocusedBorder(Builder::convert($focusedBorder));
    return $this;
  }

  public function focusedErrorBorder(\Lenra\App\Components\Styles\InputBorder $focusedErrorBorder): self {
    $this->data->setFocusedErrorBorder(Builder::convert($focusedErrorBorder));
    return $this;
  }

  public function helperMaxLines(int $helperMaxLines): self {
    $this->data->setHelperMaxLines(Builder::convert($helperMaxLines));
    return $this;
  }

  public function helperStyle(\Lenra\App\Components\Styles\TextStyle $helperStyle): self {
    $this->data->setHelperStyle(Builder::convert($helperStyle));
    return $this;
  }

  public function helperText(string $helperText): self {
    $this->data->setHelperText(Builder::convert($helperText));
    return $this;
  }

  public function hintMaxLines(int $hintMaxLines): self {
    $this->data->setHintMaxLines(Builder::convert($hintMaxLines));
    return $this;
  }

  public function hintStyle(\Lenra\App\Components\Styles\TextStyle $hintStyle): self {
    $this->data->setHintStyle(Builder::convert($hintStyle));
    return $this;
  }

  public function hintText(string $hintText): self {
    $this->data->setHintText(Builder::convert($hintText));
    return $this;
  }

  public function hintTextDirection(string $hintTextDirection): self {
    $this->data->setHintTextDirection(Builder::convert($hintTextDirection));
    return $this;
  }

  public function hoverColor(int $hoverColor): self {
    $this->data->setHoverColor(Builder::convert($hoverColor));
    return $this;
  }

  public function icon(\Lenra\App\Components\Icon $icon): self {
    $this->data->setIcon(Builder::convert($icon));
    return $this;
  }

  public function iconColor(int $iconColor): self {
    $this->data->setIconColor(Builder::convert($iconColor));
    return $this;
  }

  public function isCollapsed(bool $isCollapsed): self {
    $this->data->setIsCollapsed(Builder::convert($isCollapsed));
    return $this;
  }

  public function isDense(bool $isDense): self {
    $this->data->setIsDense(Builder::convert($isDense));
    return $this;
  }

  public function label($label): self {
    $this->data->setLabel(Builder::convert($label));
    return $this;
  }

  public function labelStyle(\Lenra\App\Components\Styles\TextStyle $labelStyle): self {
    $this->data->setLabelStyle(Builder::convert($labelStyle));
    return $this;
  }

  public function labelText(string $labelText): self {
    $this->data->setLabelText(Builder::convert($labelText));
    return $this;
  }

  public function prefix($prefix): self {
    $this->data->setPrefix(Builder::convert($prefix));
    return $this;
  }

  public function prefixIcon(\Lenra\App\Components\Icon $prefixIcon): self {
    $this->data->setPrefixIcon(Builder::convert($prefixIcon));
    return $this;
  }

  public function prefixIconColor(int $prefixIconColor): self {
    $this->data->setPrefixIconColor(Builder::convert($prefixIconColor));
    return $this;
  }

  public function prefixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $prefixIconConstraints): self {
    $this->data->setPrefixIconConstraints(Builder::convert($prefixIconConstraints));
    return $this;
  }

  public function prefixStyle(\Lenra\App\Components\Styles\TextStyle $prefixStyle): self {
    $this->data->setPrefixStyle(Builder::convert($prefixStyle));
    return $this;
  }

  public function prefixText(string $prefixText): self {
    $this->data->setPrefixText(Builder::convert($prefixText));
    return $this;
  }

  public function semanticCounterText(string $semanticCounterText): self {
    $this->data->setSemanticCounterText(Builder::convert($semanticCounterText));
    return $this;
  }

  public function suffix($suffix): self {
    $this->data->setSuffix(Builder::convert($suffix));
    return $this;
  }

  public function suffixIcon(\Lenra\App\Components\Icon $suffixIcon): self {
    $this->data->setSuffixIcon(Builder::convert($suffixIcon));
    return $this;
  }

  public function suffixIconColor(int $suffixIconColor): self {
    $this->data->setSuffixIconColor(Builder::convert($suffixIconColor));
    return $this;
  }

  public function suffixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $suffixIconConstraints): self {
    $this->data->setSuffixIconConstraints(Builder::convert($suffixIconConstraints));
    return $this;
  }

  public function suffixStyle(\Lenra\App\Components\Styles\TextStyle $suffixStyle): self {
    $this->data->setSuffixStyle(Builder::convert($suffixStyle));
    return $this;
  }

  public function suffixText(string $suffixText): self {
    $this->data->setSuffixText(Builder::convert($suffixText));
    return $this;
  }

}
