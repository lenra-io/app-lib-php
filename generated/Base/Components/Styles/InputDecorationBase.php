<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components\Styles;

use Lenra\App\Components\Base\Builder;

abstract class InputDecorationBase extends Builder {
  public function __construct()
  {
    parent::__construct();
  }

  public function alignLabelWithHint(bool $alignLabelWithHint): self {
    $this->data['alignLabelWithHint'] = $alignLabelWithHint;
    return $this;
  }

  public function border(\Lenra\App\Components\Styles\InputBorder $border): self {
    $this->data['border'] = $border;
    return $this;
  }

  public function constraints(\Lenra\App\Components\Styles\BoxConstraints $constraints): self {
    $this->data['constraints'] = $constraints;
    return $this;
  }

  public function contentPadding(\Lenra\App\Components\Styles\Padding $contentPadding): self {
    $this->data['contentPadding'] = $contentPadding;
    return $this;
  }

  public function counter($counter): self {
    $this->data['counter'] = $counter;
    return $this;
  }

  public function counterStyle(\Lenra\App\Components\Styles\TextStyle $counterStyle): self {
    $this->data['counterStyle'] = $counterStyle;
    return $this;
  }

  public function counterText(string $counterText): self {
    $this->data['counterText'] = $counterText;
    return $this;
  }

  public function disabledBorder(\Lenra\App\Components\Styles\InputBorder $disabledBorder): self {
    $this->data['disabledBorder'] = $disabledBorder;
    return $this;
  }

  public function enabled(bool $enabled): self {
    $this->data['enabled'] = $enabled;
    return $this;
  }

  public function enabledBorder(\Lenra\App\Components\Styles\InputBorder $enabledBorder): self {
    $this->data['enabledBorder'] = $enabledBorder;
    return $this;
  }

  public function errorBorder(\Lenra\App\Components\Styles\InputBorder $errorBorder): self {
    $this->data['errorBorder'] = $errorBorder;
    return $this;
  }

  public function errorMaxLines(int $errorMaxLines): self {
    $this->data['errorMaxLines'] = $errorMaxLines;
    return $this;
  }

  public function errorStyle(\Lenra\App\Components\Styles\TextStyle $errorStyle): self {
    $this->data['errorStyle'] = $errorStyle;
    return $this;
  }

  public function errorText(string $errorText): self {
    $this->data['errorText'] = $errorText;
    return $this;
  }

  public function fillColor(int $fillColor): self {
    $this->data['fillColor'] = $fillColor;
    return $this;
  }

  public function filled(bool $filled): self {
    $this->data['filled'] = $filled;
    return $this;
  }

  public function floatingLabelBehavior(string $floatingLabelBehavior): self {
    $this->data['floatingLabelBehavior'] = $floatingLabelBehavior;
    return $this;
  }

  public function floatingLabelStyle(\Lenra\App\Components\Styles\TextStyle $floatingLabelStyle): self {
    $this->data['floatingLabelStyle'] = $floatingLabelStyle;
    return $this;
  }

  public function focusColor(int $focusColor): self {
    $this->data['focusColor'] = $focusColor;
    return $this;
  }

  public function focusedBorder(\Lenra\App\Components\Styles\InputBorder $focusedBorder): self {
    $this->data['focusedBorder'] = $focusedBorder;
    return $this;
  }

  public function focusedErrorBorder(\Lenra\App\Components\Styles\InputBorder $focusedErrorBorder): self {
    $this->data['focusedErrorBorder'] = $focusedErrorBorder;
    return $this;
  }

  public function helperMaxLines(int $helperMaxLines): self {
    $this->data['helperMaxLines'] = $helperMaxLines;
    return $this;
  }

  public function helperStyle(\Lenra\App\Components\Styles\TextStyle $helperStyle): self {
    $this->data['helperStyle'] = $helperStyle;
    return $this;
  }

  public function helperText(string $helperText): self {
    $this->data['helperText'] = $helperText;
    return $this;
  }

  public function hintMaxLines(int $hintMaxLines): self {
    $this->data['hintMaxLines'] = $hintMaxLines;
    return $this;
  }

  public function hintStyle(\Lenra\App\Components\Styles\TextStyle $hintStyle): self {
    $this->data['hintStyle'] = $hintStyle;
    return $this;
  }

  public function hintText(string $hintText): self {
    $this->data['hintText'] = $hintText;
    return $this;
  }

  public function hintTextDirection(string $hintTextDirection): self {
    $this->data['hintTextDirection'] = $hintTextDirection;
    return $this;
  }

  public function hoverColor(int $hoverColor): self {
    $this->data['hoverColor'] = $hoverColor;
    return $this;
  }

  public function icon(\Lenra\App\Components\Icon $icon): self {
    $this->data['icon'] = $icon;
    return $this;
  }

  public function iconColor(int $iconColor): self {
    $this->data['iconColor'] = $iconColor;
    return $this;
  }

  public function isCollapsed(bool $isCollapsed): self {
    $this->data['isCollapsed'] = $isCollapsed;
    return $this;
  }

  public function isDense(bool $isDense): self {
    $this->data['isDense'] = $isDense;
    return $this;
  }

  public function label($label): self {
    $this->data['label'] = $label;
    return $this;
  }

  public function labelStyle(\Lenra\App\Components\Styles\TextStyle $labelStyle): self {
    $this->data['labelStyle'] = $labelStyle;
    return $this;
  }

  public function labelText(string $labelText): self {
    $this->data['labelText'] = $labelText;
    return $this;
  }

  public function prefix($prefix): self {
    $this->data['prefix'] = $prefix;
    return $this;
  }

  public function prefixIcon(\Lenra\App\Components\Icon $prefixIcon): self {
    $this->data['prefixIcon'] = $prefixIcon;
    return $this;
  }

  public function prefixIconColor(int $prefixIconColor): self {
    $this->data['prefixIconColor'] = $prefixIconColor;
    return $this;
  }

  public function prefixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $prefixIconConstraints): self {
    $this->data['prefixIconConstraints'] = $prefixIconConstraints;
    return $this;
  }

  public function prefixStyle(\Lenra\App\Components\Styles\TextStyle $prefixStyle): self {
    $this->data['prefixStyle'] = $prefixStyle;
    return $this;
  }

  public function prefixText(string $prefixText): self {
    $this->data['prefixText'] = $prefixText;
    return $this;
  }

  public function semanticCounterText(string $semanticCounterText): self {
    $this->data['semanticCounterText'] = $semanticCounterText;
    return $this;
  }

  public function suffix($suffix): self {
    $this->data['suffix'] = $suffix;
    return $this;
  }

  public function suffixIcon(\Lenra\App\Components\Icon $suffixIcon): self {
    $this->data['suffixIcon'] = $suffixIcon;
    return $this;
  }

  public function suffixIconColor(int $suffixIconColor): self {
    $this->data['suffixIconColor'] = $suffixIconColor;
    return $this;
  }

  public function suffixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $suffixIconConstraints): self {
    $this->data['suffixIconConstraints'] = $suffixIconConstraints;
    return $this;
  }

  public function suffixStyle(\Lenra\App\Components\Styles\TextStyle $suffixStyle): self {
    $this->data['suffixStyle'] = $suffixStyle;
    return $this;
  }

  public function suffixText(string $suffixText): self {
    $this->data['suffixText'] = $suffixText;
    return $this;
  }

}
