<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components\Styles;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsStylesInputDecoration>
*/
abstract class InputDecorationBase extends Builder {
  public function __construct()
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsStylesInputDecoration::class, Lenra\App\Response\View\Normalizer\ComponentsStylesInputDecorationNormalizer::class);
  }

  public function alignLabelWithHint(bool $alignLabelWithHint): InputDecorationBase {
    if ($alignLabelWithHint instanceof Builder) $alignLabelWithHint = $alignLabelWithHint->data;
    $this->data->setAlignLabelWithHint($alignLabelWithHint);
    return $this;
  }

  public function border(\Lenra\App\Components\Styles\InputBorder $border): InputDecorationBase {
    if ($border instanceof Builder) $border = $border->data;
    $this->data->setBorder($border);
    return $this;
  }

  public function constraints(\Lenra\App\Components\Styles\BoxConstraints $constraints): InputDecorationBase {
    if ($constraints instanceof Builder) $constraints = $constraints->data;
    $this->data->setConstraints($constraints);
    return $this;
  }

  public function contentPadding(\Lenra\App\Components\Styles\Padding $contentPadding): InputDecorationBase {
    if ($contentPadding instanceof Builder) $contentPadding = $contentPadding->data;
    $this->data->setContentPadding($contentPadding);
    return $this;
  }

  public function counter($counter): InputDecorationBase {
    if ($counter instanceof Builder) $counter = $counter->data;
    $this->data->setCounter($counter);
    return $this;
  }

  public function counterStyle(\Lenra\App\Components\Styles\TextStyle $counterStyle): InputDecorationBase {
    if ($counterStyle instanceof Builder) $counterStyle = $counterStyle->data;
    $this->data->setCounterStyle($counterStyle);
    return $this;
  }

  public function counterText(string $counterText): InputDecorationBase {
    if ($counterText instanceof Builder) $counterText = $counterText->data;
    $this->data->setCounterText($counterText);
    return $this;
  }

  public function disabledBorder(\Lenra\App\Components\Styles\InputBorder $disabledBorder): InputDecorationBase {
    if ($disabledBorder instanceof Builder) $disabledBorder = $disabledBorder->data;
    $this->data->setDisabledBorder($disabledBorder);
    return $this;
  }

  public function enabled(bool $enabled): InputDecorationBase {
    if ($enabled instanceof Builder) $enabled = $enabled->data;
    $this->data->setEnabled($enabled);
    return $this;
  }

  public function enabledBorder(\Lenra\App\Components\Styles\InputBorder $enabledBorder): InputDecorationBase {
    if ($enabledBorder instanceof Builder) $enabledBorder = $enabledBorder->data;
    $this->data->setEnabledBorder($enabledBorder);
    return $this;
  }

  public function errorBorder(\Lenra\App\Components\Styles\InputBorder $errorBorder): InputDecorationBase {
    if ($errorBorder instanceof Builder) $errorBorder = $errorBorder->data;
    $this->data->setErrorBorder($errorBorder);
    return $this;
  }

  public function errorMaxLines(int $errorMaxLines): InputDecorationBase {
    if ($errorMaxLines instanceof Builder) $errorMaxLines = $errorMaxLines->data;
    $this->data->setErrorMaxLines($errorMaxLines);
    return $this;
  }

  public function errorStyle(\Lenra\App\Components\Styles\TextStyle $errorStyle): InputDecorationBase {
    if ($errorStyle instanceof Builder) $errorStyle = $errorStyle->data;
    $this->data->setErrorStyle($errorStyle);
    return $this;
  }

  public function errorText(string $errorText): InputDecorationBase {
    if ($errorText instanceof Builder) $errorText = $errorText->data;
    $this->data->setErrorText($errorText);
    return $this;
  }

  public function fillColor(int $fillColor): InputDecorationBase {
    if ($fillColor instanceof Builder) $fillColor = $fillColor->data;
    $this->data->setFillColor($fillColor);
    return $this;
  }

  public function filled(bool $filled): InputDecorationBase {
    if ($filled instanceof Builder) $filled = $filled->data;
    $this->data->setFilled($filled);
    return $this;
  }

  public function floatingLabelBehavior(string $floatingLabelBehavior): InputDecorationBase {
    if ($floatingLabelBehavior instanceof Builder) $floatingLabelBehavior = $floatingLabelBehavior->data;
    $this->data->setFloatingLabelBehavior($floatingLabelBehavior);
    return $this;
  }

  public function floatingLabelStyle(\Lenra\App\Components\Styles\TextStyle $floatingLabelStyle): InputDecorationBase {
    if ($floatingLabelStyle instanceof Builder) $floatingLabelStyle = $floatingLabelStyle->data;
    $this->data->setFloatingLabelStyle($floatingLabelStyle);
    return $this;
  }

  public function focusColor(int $focusColor): InputDecorationBase {
    if ($focusColor instanceof Builder) $focusColor = $focusColor->data;
    $this->data->setFocusColor($focusColor);
    return $this;
  }

  public function focusedBorder(\Lenra\App\Components\Styles\InputBorder $focusedBorder): InputDecorationBase {
    if ($focusedBorder instanceof Builder) $focusedBorder = $focusedBorder->data;
    $this->data->setFocusedBorder($focusedBorder);
    return $this;
  }

  public function focusedErrorBorder(\Lenra\App\Components\Styles\InputBorder $focusedErrorBorder): InputDecorationBase {
    if ($focusedErrorBorder instanceof Builder) $focusedErrorBorder = $focusedErrorBorder->data;
    $this->data->setFocusedErrorBorder($focusedErrorBorder);
    return $this;
  }

  public function helperMaxLines(int $helperMaxLines): InputDecorationBase {
    if ($helperMaxLines instanceof Builder) $helperMaxLines = $helperMaxLines->data;
    $this->data->setHelperMaxLines($helperMaxLines);
    return $this;
  }

  public function helperStyle(\Lenra\App\Components\Styles\TextStyle $helperStyle): InputDecorationBase {
    if ($helperStyle instanceof Builder) $helperStyle = $helperStyle->data;
    $this->data->setHelperStyle($helperStyle);
    return $this;
  }

  public function helperText(string $helperText): InputDecorationBase {
    if ($helperText instanceof Builder) $helperText = $helperText->data;
    $this->data->setHelperText($helperText);
    return $this;
  }

  public function hintMaxLines(int $hintMaxLines): InputDecorationBase {
    if ($hintMaxLines instanceof Builder) $hintMaxLines = $hintMaxLines->data;
    $this->data->setHintMaxLines($hintMaxLines);
    return $this;
  }

  public function hintStyle(\Lenra\App\Components\Styles\TextStyle $hintStyle): InputDecorationBase {
    if ($hintStyle instanceof Builder) $hintStyle = $hintStyle->data;
    $this->data->setHintStyle($hintStyle);
    return $this;
  }

  public function hintText(string $hintText): InputDecorationBase {
    if ($hintText instanceof Builder) $hintText = $hintText->data;
    $this->data->setHintText($hintText);
    return $this;
  }

  public function hintTextDirection(string $hintTextDirection): InputDecorationBase {
    if ($hintTextDirection instanceof Builder) $hintTextDirection = $hintTextDirection->data;
    $this->data->setHintTextDirection($hintTextDirection);
    return $this;
  }

  public function hoverColor(int $hoverColor): InputDecorationBase {
    if ($hoverColor instanceof Builder) $hoverColor = $hoverColor->data;
    $this->data->setHoverColor($hoverColor);
    return $this;
  }

  public function icon(\Lenra\App\Components\Icon $icon): InputDecorationBase {
    if ($icon instanceof Builder) $icon = $icon->data;
    $this->data->setIcon($icon);
    return $this;
  }

  public function iconColor(int $iconColor): InputDecorationBase {
    if ($iconColor instanceof Builder) $iconColor = $iconColor->data;
    $this->data->setIconColor($iconColor);
    return $this;
  }

  public function isCollapsed(bool $isCollapsed): InputDecorationBase {
    if ($isCollapsed instanceof Builder) $isCollapsed = $isCollapsed->data;
    $this->data->setIsCollapsed($isCollapsed);
    return $this;
  }

  public function isDense(bool $isDense): InputDecorationBase {
    if ($isDense instanceof Builder) $isDense = $isDense->data;
    $this->data->setIsDense($isDense);
    return $this;
  }

  public function label($label): InputDecorationBase {
    if ($label instanceof Builder) $label = $label->data;
    $this->data->setLabel($label);
    return $this;
  }

  public function labelStyle(\Lenra\App\Components\Styles\TextStyle $labelStyle): InputDecorationBase {
    if ($labelStyle instanceof Builder) $labelStyle = $labelStyle->data;
    $this->data->setLabelStyle($labelStyle);
    return $this;
  }

  public function labelText(string $labelText): InputDecorationBase {
    if ($labelText instanceof Builder) $labelText = $labelText->data;
    $this->data->setLabelText($labelText);
    return $this;
  }

  public function prefix($prefix): InputDecorationBase {
    if ($prefix instanceof Builder) $prefix = $prefix->data;
    $this->data->setPrefix($prefix);
    return $this;
  }

  public function prefixIcon(\Lenra\App\Components\Icon $prefixIcon): InputDecorationBase {
    if ($prefixIcon instanceof Builder) $prefixIcon = $prefixIcon->data;
    $this->data->setPrefixIcon($prefixIcon);
    return $this;
  }

  public function prefixIconColor(int $prefixIconColor): InputDecorationBase {
    if ($prefixIconColor instanceof Builder) $prefixIconColor = $prefixIconColor->data;
    $this->data->setPrefixIconColor($prefixIconColor);
    return $this;
  }

  public function prefixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $prefixIconConstraints): InputDecorationBase {
    if ($prefixIconConstraints instanceof Builder) $prefixIconConstraints = $prefixIconConstraints->data;
    $this->data->setPrefixIconConstraints($prefixIconConstraints);
    return $this;
  }

  public function prefixStyle(\Lenra\App\Components\Styles\TextStyle $prefixStyle): InputDecorationBase {
    if ($prefixStyle instanceof Builder) $prefixStyle = $prefixStyle->data;
    $this->data->setPrefixStyle($prefixStyle);
    return $this;
  }

  public function prefixText(string $prefixText): InputDecorationBase {
    if ($prefixText instanceof Builder) $prefixText = $prefixText->data;
    $this->data->setPrefixText($prefixText);
    return $this;
  }

  public function semanticCounterText(string $semanticCounterText): InputDecorationBase {
    if ($semanticCounterText instanceof Builder) $semanticCounterText = $semanticCounterText->data;
    $this->data->setSemanticCounterText($semanticCounterText);
    return $this;
  }

  public function suffix($suffix): InputDecorationBase {
    if ($suffix instanceof Builder) $suffix = $suffix->data;
    $this->data->setSuffix($suffix);
    return $this;
  }

  public function suffixIcon(\Lenra\App\Components\Icon $suffixIcon): InputDecorationBase {
    if ($suffixIcon instanceof Builder) $suffixIcon = $suffixIcon->data;
    $this->data->setSuffixIcon($suffixIcon);
    return $this;
  }

  public function suffixIconColor(int $suffixIconColor): InputDecorationBase {
    if ($suffixIconColor instanceof Builder) $suffixIconColor = $suffixIconColor->data;
    $this->data->setSuffixIconColor($suffixIconColor);
    return $this;
  }

  public function suffixIconConstraints(\Lenra\App\Components\Styles\BoxConstraints $suffixIconConstraints): InputDecorationBase {
    if ($suffixIconConstraints instanceof Builder) $suffixIconConstraints = $suffixIconConstraints->data;
    $this->data->setSuffixIconConstraints($suffixIconConstraints);
    return $this;
  }

  public function suffixStyle(\Lenra\App\Components\Styles\TextStyle $suffixStyle): InputDecorationBase {
    if ($suffixStyle instanceof Builder) $suffixStyle = $suffixStyle->data;
    $this->data->setSuffixStyle($suffixStyle);
    return $this;
  }

  public function suffixText(string $suffixText): InputDecorationBase {
    if ($suffixText instanceof Builder) $suffixText = $suffixText->data;
    $this->data->setSuffixText($suffixText);
    return $this;
  }

}
