<?php
// This file is auto-generated by generate-classes.php. Do not edit it.

namespace Lenra\App\Base\Components\Styles;

use Lenra\App\Components\Base\Builder;

/**
* @template-extends Builder<\Lenra\App\Response\View\Model\ComponentsStylesToggleStyle>
*/
abstract class ToggleStyleBase extends Builder {
  public function __construct()
  {
    parent::__construct(Null, \Lenra\App\Response\View\Model\ComponentsStylesToggleStyle::class, Lenra\App\Response\View\Normalizer\ComponentsStylesToggleStyleNormalizer::class);
  }

  public function activeColor(int $activeColor): ToggleStyleBase {
    if ($activeColor instanceof Builder) $activeColor = $activeColor->data;
    $this->data->setActiveColor($activeColor);
    return $this;
  }

  public function activeTrackColor(int $activeTrackColor): ToggleStyleBase {
    if ($activeTrackColor instanceof Builder) $activeTrackColor = $activeTrackColor->data;
    $this->data->setActiveTrackColor($activeTrackColor);
    return $this;
  }

  public function inactiveTrackColor(int $inactiveTrackColor): ToggleStyleBase {
    if ($inactiveTrackColor instanceof Builder) $inactiveTrackColor = $inactiveTrackColor->data;
    $this->data->setInactiveTrackColor($inactiveTrackColor);
    return $this;
  }

  public function inactiveThumbColor(int $inactiveThumbColor): ToggleStyleBase {
    if ($inactiveThumbColor instanceof Builder) $inactiveThumbColor = $inactiveThumbColor->data;
    $this->data->setInactiveThumbColor($inactiveThumbColor);
    return $this;
  }

  public function hoverColor(int $hoverColor): ToggleStyleBase {
    if ($hoverColor instanceof Builder) $hoverColor = $hoverColor->data;
    $this->data->setHoverColor($hoverColor);
    return $this;
  }

  public function focusColor(int $focusColor): ToggleStyleBase {
    if ($focusColor instanceof Builder) $focusColor = $focusColor->data;
    $this->data->setFocusColor($focusColor);
    return $this;
  }

  public function activeThumbImage(\Lenra\App\Components\Image $activeThumbImage): ToggleStyleBase {
    if ($activeThumbImage instanceof Builder) $activeThumbImage = $activeThumbImage->data;
    $this->data->setActiveThumbImage($activeThumbImage);
    return $this;
  }

  public function inactiveThumbImage(\Lenra\App\Components\Image $inactiveThumbImage): ToggleStyleBase {
    if ($inactiveThumbImage instanceof Builder) $inactiveThumbImage = $inactiveThumbImage->data;
    $this->data->setInactiveThumbImage($inactiveThumbImage);
    return $this;
  }

  public function materialTapTargetSize(string $materialTapTargetSize): ToggleStyleBase {
    if ($materialTapTargetSize instanceof Builder) $materialTapTargetSize = $materialTapTargetSize->data;
    $this->data->setMaterialTapTargetSize($materialTapTargetSize);
    return $this;
  }

}
