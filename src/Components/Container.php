<?php
// This file is auto-generated by generate-classes.php but it can be edited

namespace Lenra\App\Components;

use Lenra\App\Components\Styles\Border;
use Lenra\App\Components\Styles\BorderRadius;
use Lenra\App\Components\Styles\BorderSide;
use Lenra\App\Components\Styles\BoxConstraints;
use Lenra\App\Components\Styles\BoxDecoration;
use Lenra\App\Components\Styles\BoxShadow;
use Lenra\App\Components\Styles\Colors;
use Lenra\App\Components\Styles\Offset;
use Lenra\App\Components\Styles\Padding;

class Container extends \Lenra\App\Base\Components\ContainerBase {
  // Add here custom implementations

  protected function initSubdata(string $className, string $key) {
    if (!isset($this->data[$key])) {
      $this->data[$key] = new $className();
    }
    return $this->data[$key];
  }

  // Constraints
  protected function initConstraints(): BoxConstraints {
    return $this->initSubdata(BoxConstraints::class, 'constraints');
  }
  public function width($width): self {
    $this->initConstraints()
      ->minWidth($width)
      ->maxWidth($width);
    return $this;
  }
  public function minWidth($width): self {
    $this->initConstraints()->minWidth($width);
    return $this;
  }
  public function maxWidth($width): self {
    $this->initConstraints()->maxWidth($width);
    return $this;
  }
  public function height($height): self {
    $this->initConstraints()
      ->minHeight($height)
      ->maxHeight($height);
    return $this;
  }
  public function minHeight($height): self {
    $this->initConstraints()->minHeight($height);
    return $this;
  }
  public function maxHeight($height): self {
    $this->initConstraints()->maxHeight($height);
    return $this;
  }

  // Decoration
  protected function initDecoration(): BoxDecoration {
    return $this->initSubdata(BoxDecoration::class, 'decoration');
  }
  public function borderRadius(BorderRadius $borderRadius): self {
    $this->initDecoration()->borderRadius($borderRadius);
    return $this;
  }
  public function boxShadow(BoxShadow $boxShadow): self {
    $this->initDecoration()->boxShadow($boxShadow);
    return $this;
  }
  public function color(int $color): self {
    $this->initDecoration()->color($color);
    return $this;
  }
  public function shape(string $shape): self {
    $this->initDecoration()->shape($shape);
    return $this;
  }

  public static function card($child = null): Container {
    return Container::builder($child)
      ->border(
        Border::all(
          BorderSide::builder()
            ->width(1)
            ->color(0xffdce0e7),
        ),
      )
      ->padding(Padding::all(16))
      ->color(Colors::WHITE)
      ->borderRadius(BorderRadius::all(8))
      ->boxShadow(
        BoxShadow::builder()
          ->blurRadius(10)
          ->offset(
            Offset::builder()
              ->dx(4)
              ->dy(4)
          )
          ->color(
            Colors::opacity(Colors::BLACK, 0.5)
          )
      );
  }

  public static function builder($child = null): Container {
    $ret = new Container();
    if (isset($child)) {
      $ret->child($child);
    }
    return $ret;
  }
}
